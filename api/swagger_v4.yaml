swagger: '2.0'
info:
  version: '4_0_0_0'
  title: SmartFace
host: 'localhost:8099'
schemes:
  - http
  - https
consumes: []
produces: []
paths:
  /api/v1/Cameras:
    get:
      tags:
      - api/v1/Cameras
      summary: "Returns all Cameras"
      description: "Returns all Cameras"
      operationId: "getLiveCameras"
      produces:
      - "application/json"
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ListLiveCamera'
    post:
      tags:
      - api/v1/Cameras
      summary: "Add a new live camera"
      description: ""
      operationId: "addLiveCamera"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Camera object that needs to be added to the scope"
        required: true
        schema:
          $ref: "#/definitions/StreamSourceData"
      responses:
        405:
          description: "Invalid input"
  /api/v1/Cameras/{liveCameraId}:
    get:
      tags:
      - api/v1/Cameras
      summary: "Returns Camera"
      description: "Returns Camera"
      operationId: "getLiveCamera"
      produces:
      - "application/json"
      parameters:
      - name: "liveCameraId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/LiveCamera'
    delete:
      tags:
      - api/v1/Cameras
      summary: "Delete Camera"
      description: "Delete Camera"
      operationId: "deleteLiveCamera"
      produces:
      - "application/json"
      parameters:
      - name: "liveCameraId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Not found"
          
  /api/v1/VideoRecordings/:
    get:
      tags:
      - api/v1/VideoRecordings
      summary: "Returns all video records"
      description: "Returns all video records"
      operationId: "getVideoRecords"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ListVideoRecord'
    post:
      tags:
      - api/v1/VideoRecordings
      summary: "Add a new video record"
      description: ""
      operationId: "RecordedVideo"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Video record that needs to be added to the scope"
        required: true
        schema:
          $ref: "#/definitions/StreamSourceData"
      responses:
        405:
          description: "Invalid input"
  /api/v1/VideoRecordings/{id}:
    get:
      tags:
      - api/v1/VideoRecordings
      summary: "Returns recorded video"
      description: ""
      operationId: "getRecordedDataScopeVideoRecord"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/VideoRecord'
    delete:
      tags:
      - api/v1/VideoRecordings
      summary: "Delete video"
      description: "Delete video"
      operationId: "deleteRecordedVideo"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Not found"
          
  /api/v1/Groupings/Live:
    get:
      tags:
      - api/v1/Groupings/Live
      summary: "Returns all Groupings"
      description: "Returns all Groupings"
      operationId: "getLiveGroupings"
      produces:
      - "application/json"
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ListLiveGrouping'
    post:
      tags:
      - api/v1/Groupings/Live
      summary: "Add a new grouping"
      description: ""
      operationId: "addLiveGrouping"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Grouping object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/LiveGrouping"
      responses:
        405:
          description: "Invalid input"
  /api/v1/Groupings/Live/{groupingId}:
    get:
      tags:
      - api/v1/Groupings/Live
      summary: "Find Grouping by ID"
      description: "Returns a single Grouping"
      operationId: "getLiveGroupingById"
      produces:
      - "application/json"
      parameters:
      - name: "groupingId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/LiveGrouping"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Scope not found"
    delete:
      tags:
      - api/v1/Groupings/Live
      summary: "Deletes a Grouping"
      description: ""
      operationId: "deleteLiveGrouping"
      produces:
      - "application/json"
      parameters:
      - name: "groupingId"
        in: "path"
        description: "Id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Grouping not found"
  /api/v1/Groupings/Live/{groupingId}/Cameras:
    get:
      tags:
      - api/v1/Groupings/Live
      summary: "Returns all Grouping Cameras"
      description: "Returns all Grouping Cameras"
      operationId: "getLiveGroupingCameras"
      produces:
      - "application/json"
      parameters:
      - name: "groupingId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ListLiveCamera'
  /api/v1/Groupings/Live/{groupingId}/Cameras/{liveCameraId}:
    get:
      tags:
      - api/v1/Groupings/Live
      summary: "Returns Camera"
      description: "Returns Camera"
      operationId: "getLiveGroupingCamera"
      produces:
      - "application/json"
      parameters:
      - name: "groupingId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "liveCameraId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/LiveCamera'
  /api/v1/Groupings/Live/{groupingId}/LinkToCamera:
    post:
      tags:
        - api/v1/Groupings/Live
      summary: Links to camera.
      operationId: Grouping_LinkToCamera
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: "groupingId"
          in: "path"
          required: true
          type: "integer"
          format: "int64"
        - name: Payload
          in: body
          description: >-
            JSON with Camera Ids
          required: true
          schema:
            required:
              - CameraIds
            type: object
            properties:
              CameraIds:
                type: array
                items:
                  format: int64
                  type: integer
      responses:
        '200':
          description: Link Cameras to Grouping.
      deprecated: false
  /api/v1/Groupings/Live/{groupingId}/UnLinkFromCamera:
    post:
      tags:
        - api/v1/Groupings/Live
      summary: Unlink from Camera.
      operationId: Grouping_UnlinkFromCamera
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: "groupingId"
          in: "path"
          required: true
          type: "integer"
          format: "int64"
        - name: Payload
          in: body
          description: >-
            JSON with Camera Ids
          required: true
          schema:
            required:
              - CameraIds
            type: object
            properties:
              CameraIds:
                type: array
                items:
                  format: int64
                  type: integer
      responses:
        '200':
          description: Unlink Cameras from Grouping.
      deprecated: false







            
  /api/v1/Groupings/Recordings:
    get:
      tags:
      - api/v1/Groupings/Recordings
      summary: "Returns all Groupings"
      description: "Returns all Groupings"
      operationId: "getRDGroupings"
      produces:
      - "application/json"
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ListRecordingsGrouping'
    post:
      tags:
      - api/v1/Groupings/Recordings
      summary: "Add a new grouping"
      description: ""
      operationId: "addRDGrouping"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/RecordingsGrouping"
      responses:
        405:
          description: "Invalid input"
  /api/v1/Groupings/Recordings/{groupingId}:
    get:
      tags:
      - api/v1/Groupings/Recordings
      summary: "Find Grouping by ID"
      description: "Returns a single Grouping"
      operationId: "getRDGroupingById"
      produces:
      - "application/json"
      parameters:
      - name: "groupingId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/RecordingsGrouping"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Scope not found"
    delete:
      tags:
      - api/v1/Groupings/Recordings
      summary: "Deletes a Grouping"
      description: ""
      operationId: "deleteRDGrouping"
      produces:
      - "application/json"
      parameters:
      - name: "groupingId"
        in: "path"
        description: "Id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "LiveScope not found"
  /api/v1/Groupings/Recordings/{groupingId}/GetStatus:
    get:
      tags:
      - api/v1/Groupings/Recordings
      summary: Gets progress status of scope.
      description: Returns progress info message for given scope.
      operationId: GetGroupingStatus
      consumes: []
      produces:
        - application/json
      parameters:
      - name: "groupingId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        '200':
          description: Success
        '404':
          description: Not found
      deprecated: false
  /api/v1/Groupings/Recordings/{groupingId}/UploadImage:
    post:
      tags:
      - api/v1/Groupings/Recordings
      summary: "uploads an image"
      description: ""
      operationId: Frames_Post
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: "groupingId"
          in: "path"
          description: ""
          required: true
          type: "integer"
          format: "int64"
        - name: Data
          in: formData
          description: Binary Frame to upload
          required: true
          type: file
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Frame' 
  /api/v1/Groupings/Recordings/{groupingId}/VideoRecords:
    get:
      tags:
      - api/v1/Groupings/Recordings
      summary: "Returns all video records"
      description: "Returns all video records"
      operationId: "getGroupingVideoRecords"
      produces:
      - "application/json"
      parameters:
      - name: "groupingId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ListVideoRecord'
  /api/v1/Groupings/Recordings/{groupingId}/VideoRecords/{videoRecordId}:
    get:
      tags:
      - api/v1/Groupings/Recordings
      summary: "Returns grouping video"
      description: "Returns grouping video"
      operationId: "getGroupingVideoRecord"
      produces:
      - "application/json"
      parameters:
      - name: "groupingId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "videoRecordId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/VideoRecord'          
  /api/v1/Groupings/Recordings/{groupingId}/LinkToVideoRecord:
    post:
      tags:
        - api/v1/Groupings/Recordings
      summary: Links to VideoRecord.
      operationId: Grouping_LinkToVideoRecord
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: "groupingId"
          in: "path"
          required: true
          type: "integer"
          format: "int64"
        - name: Payload
          in: body
          description: >-
            JSON with VideoRecord Ids
          required: true
          schema:
            required:
              - RecordingIds
            type: object
            properties:
              CameraIds:
                type: array
                items:
                  format: int64
                  type: integer
      responses:
        '200':
          description: Link Cameras to Grouping.
      deprecated: false
  /api/v1/Groupings/Recordings/{groupingId}/UnLinkFromVideoRecord:
    post:
      tags:
        - api/v1/Groupings/Recordings
      summary: Unlink from VideoRecord.
      operationId: Grouping_UnlinkFromVideoRecord
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: "groupingId"
          in: "path"
          required: true
          type: "integer"
          format: "int64"
        - name: Payload
          in: body
          description: >-
            JSON with Camera Ids
          required: true
          schema:
            required:
              - RecordingIds
            type: object
            properties:
              CameraIds:
                type: array
                items:
                  format: int64
                  type: integer
            


            
  /api/v1/Version:
    get:
      tags:
        - api/v1/Version
      summary: Gets the information about SmartFace database and assembly.
      operationId: Version_Get
      consumes: []
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Version'
      deprecated: false  

  /api/v1/License/Check:
    get:
      tags:
        - api/v1/License
      summary: Validate Innovatrics license
      operationId: LicenseCheck_Check
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
        - multipart/form-data
        - application/octet-stream
      responses:
        '200':
          description: Status returned.
          schema:
            $ref: '#/definitions/LicenseCheckResponse'

  /api/v1/Config/SoftRestart:
    post:
      tags:
        - api/v1/Config
      summary: Handle soft api/v1art of SmartFace services.
      operationId: Services_SoftRestart
      consumes: []
      produces:
        - application/json
      parameters:
        - name: payload
          in: body
          description: SoftRestart action parameters
          required: false
          schema:
            type: object
            properties: {}
      responses:
        '204':
          description: Soft reset command to services send successfully.
      deprecated: false

  /api/v1/Config/SetLogLevel:
    post:
      tags:
        - api/v1/Config
      summary: Sets the log level.
      description: >-
        Allows to dynamically change log level for specified C# class (with
        assembly) in specified process. However, this setting will only last
        until process is api/v1arted.
      operationId: Logs_SetLogLevel
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: Payload
          in: body
          description: >-
            JSON with ServiceName, FullyQualifiedName and Level of Log that will
            be set.
          required: true
          schema:
            type: object
            properties:
              ServiceName:
                type: string
                example: SmartFace_Camera_1
              FullyQualifiedName:
                type: string
                example: SmartFace.Workers.VideoProcessing.StreamProcessing
              Level:
                type: string
                example: DEBUG
      responses:
        '200':
          description: Success
      deprecated: false
      
  /api/v1/Config/DbCleanUp:
    get:
      tags:
        - api/v1/Config
      summary: Gets Config for DbCleanUp Worker.
      operationId: DbCleanUpConfig_Get
      consumes: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DbCleanUpConfig'
      deprecated: false
    patch:
      tags:
        - api/v1/Config
      summary: Updates DbCleanUpConfig.
      operationId: DbCleanUpConfig_Patch
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: DbCleanUpConfig
          in: body
          description: The entity to patch
          required: true
          schema:
            $ref: '#/definitions/DbCleanUpConfig'
      responses:
        '200':
          description: OK
          schema:
            type: object
      deprecated: false
  /api/v1/Config/Extracting:
    get:
      tags:
        - api/v1/Config
      summary: Gets Config for Extract Workers.
      operationId: ExtractorConfig_Get
      consumes: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ExtractorConfig'
      deprecated: false
    patch:
      tags:
        - api/v1/Config
      summary: Updates ExtractorConfig.
      operationId: ExtractorConfig_Patch
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: ExtractorConfig
          in: body
          description: The entity to patch
          required: true
          schema:
            $ref: '#/definitions/ExtractorConfig'
      responses:
        '200':
          description: OK
          schema:
            type: object
      deprecated: false

  /api/v1/VisualObjects/{Id}:
    get:
      tags:
        - api/v1/VisualObjects
      summary: Gets the specified VisualObjects.
      operationId: VisualObjects_GetById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of VisualObject which is requested.
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/VisualObject'
      deprecated: false
    delete:
      tags:
        - api/v1/VisualObjects
      summary: Deletes the specified VisualObject.
      operationId: VisualObjects_DeleteById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of VisualObject to be deleted.
          required: true
          type: integer
          format: int64
      responses:
        '204':
          description: Success
        '404':
          description: VisualObject does not exist.
      deprecated: false
      
  /api/v1/Faces/{Id}:
    get:
      tags:
        - api/v1/Faces
      summary: Gets the specified Face.
      operationId: Faces_GetById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of Face which is requested.
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Face'
      deprecated: false
    delete:
      tags:
        - api/v1/Faces
      summary: Deletes the specified face.
      operationId: Faces_DeleteById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of face to be deleted.
          required: true
          type: integer
          format: int64
      responses:
        '204':
          description: Success
        '404':
          description: Face does not exist.
      deprecated: false
      
  /api/v1/Appearances/Tracklets/{Id}':
    get:
      tags:
        - api/v1/Appearances/Tracklets
      summary: Gets the specified Tracklet.
      operationId: Tracklets_GetById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of requested Tracklet.
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Tracklet'
      deprecated: false
    delete:
      tags:
        - api/v1/Appearances/Tracklets
      summary: Deletes the specified Tracklet.
      operationId: Tracklets_DeleteById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of Tracklet to be deleted.
          required: true
          type: integer
          format: int64
      responses:
        '204':
          description: Success
        '404':
          description: Tracklet does not exist.
      deprecated: false
      
  /api/v1/Appearances/Identities/{Id}:
    get:
      tags:
        - api/v1/Appearances/Identities
      summary: Gets the specified Identity.
      operationId: Identities_GetById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of Identity which is requested.
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Identity'
      deprecated: false
    delete:
      tags:
        - api/v1/Appearances/Identities
      summary: Deletes the specified identity.
      operationId: Identities_DeleteById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of identity to be deleted.
          required: true
          type: integer
          format: int64
      responses:
        '204':
          description: Success
        '404':
          description: Identity does not exist.
      deprecated: false
    patch:
      tags:
        - api/v1/Appearances/Identities
      summary: Updates the specified Identity.
      description: Currently only allows to update Hidden property.
      operationId: Identities_PatchById
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of Identity that will be updated.
          required: true
          type: integer
          format: int64
        - name: Payload
          in: body
          description: The entity to patch
          required: true
          schema:
            $ref: '#/definitions/Identity'
      responses:
        '200':
          description: OK
          schema:
            type: object
      deprecated: false
  /api/v1/Appearances/Identities/Split:
    post:
      tags:
        - api/v1/Appearances/Identities
      summary: Splits the specified parameters.
      description: >-
        Splits requested Tracklets from provided Identity into new Identity. Newly
        created Identity Id will be returned in response.
      operationId: Identities_Split
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: Payload
          in: body
          description: >-
            JSON with list of Tracklet Ids that will be split to new Identity and
            Id of Identity that will be splitted.
          required: true
          schema:
            required:
              - IdentityId
              - TrackletIds
            type: object
            properties:
              IdentityId:
                format: int64
                type: integer
              TrackletIds:
                type: array
                items:
                  format: int64
                  type: integer
      responses:
        '200':
          description: Success
        '404':
          description: Not found
      deprecated: false
  /api/v1/Appearances/Identities/Merge:
    post:
      tags:
        - api/v1/Appearances/Identities
      summary: Merges the specified Identities.
      description: >-
        Merge provided Identities into single Identity. Id of first Identity Id
        will be used as merged Identity Id.
      operationId: Identities_Merge
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: Payload
          in: body
          description: JSON with list of Identity Ids that will be merged.
          required: true
          schema:
            required:
              - Ids
            type: object
            properties:
              Ids:
                type: array
                items:
                  format: int64
                  type: integer
      responses:
        '200':
          description: Success
        '404':
          description: Not found
      deprecated: false
  /api/v1/Appearances/Identities/Search:
    post:
      tags:
        - api/v1/Appearances/Identities
      summary: Searches Identities by specified Frame.
      description: >-
        Search will be performed on all Identities in specified Grouping or
        Scope, using all of their Faces. Uploaded Frame should contain only one
        face.
      operationId: Identities_Search
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: GroupingId
          in: formData
          description: Id of Grouping where search should be performed.
          required: false
          type: string
        - name: ScopeId
          in: formData
          description: Id of Scope where search should be performed.
          required: false
          type: string
        - name: Data
          in: formData
          description: Binary face Frame to upload.
          required: true
          type: file
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ODataResponse[List[Identity]]'
      deprecated: false
      
  /api/v1/Frames/{Id}:
    get:
      tags:
        - api/v1/Frames
      summary: Gets the specified Frame by Id.
      operationId: Frames_GetById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of Frame that was requested.
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Frame'
      deprecated: false
    delete:
      tags:
        - api/v1/Frames
      summary: Deletes the specified Frame.
      operationId: Frames_DeleteById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of Frame that will be deleted.
          required: true
          type: integer
          format: int64
      responses:
        '204':
          description: Success
        '404':
          description: Not found
      deprecated: false
  /api/v1/Frames/DeleteBatch:
    delete:
      tags:
        - api/v1/Frames
      summary: Delete multiple Frames by their Ids.
      description: >-
        Allows to delete multiple Frames in single call. This will start
        iterative deletion of Frames from input array. Response will contain
        array of Frame Ids that could not be deleted with appropriate reason.
      operationId: Frames_Delete
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: Payload
          in: body
          description: JSON with array of Frame Ids that will be deleted.
          required: true
          schema:
            required:
              - Ids
            type: object
            properties:
              Ids:
                type: array
                items:
                  format: int64
                  type: integer
      responses:
        '200':
          description: Success
        '404':
          description: Not found
      deprecated: false
      
  /api/v1/Streams/{Id}':
    get:
      tags:
        - api/v1/Streams
      summary: Gets the specified Stream.
      operationId: Streams_GetById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of requested Stream.
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/StreamData'
      deprecated: false
    delete:
      tags:
        - api/v1/Streams
      summary: Updates specified Stream.
      description: Currently only allows to update Description or Name.
      operationId: Streams_DeleteById
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of Stream that will be deleted.
          required: true
          type: integer
          format: int64
      responses:
        '204':
          description: Success
        '404':
          description: Not found
      deprecated: false

  /api/v1/WatchlistMembers:
    post:
      tags:
        - api/v1/WatchlistMembers
      summary: Creates new WatchlistMember entity with provided data.
      operationId: WatchlistMembers_Post
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: WatchlistMember
          in: body
          description: The entity to post
          required: true
          schema:
            $ref: '#/definitions/WatchlistMemberCreateData'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/WatchlistMember'
      deprecated: false
  /api/v1/WatchlistMembers/{Id}:
    get:
      tags:
        - api/v1/WatchlistMembers
      summary: Gets the specified WatchlistMember by Id.
      operationId: WatchlistMembers_GetById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of WatchlistMember that was requested.
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/WatchlistMember'
      deprecated: false
    delete:
      tags:
        - api/v1/WatchlistMembers
      summary: Deletes the specified WatchlistMember.
      operationId: WatchlistMembers_DeleteById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of WatchlistMember that will be deleted.
          required: true
          type: integer
          format: int64
      responses:
        '204':
          description: Success
        '404':
          description: Not found
      deprecated: false
    patch:
      tags:
        - api/v1/WatchlistMembers
      summary: Updates specified WatchlistMember.
      operationId: WatchlistMembers_PatchById
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: 'key: Id'
          required: true
          type: integer
          format: int64
        - name: WatchlistMember
          in: body
          description: The entity to patch
          required: true
          schema:
            $ref: '#/definitions/WatchlistMember'
      responses:
        '200':
          description: OK
          schema:
            type: object
      deprecated: false
  /api/v1/WatchlistMembers/Register:
    post:
      tags:
        - api/v1/WatchlistMembers
      summary: Create or replace WatchlistMember with provided data in payload.
      operationId: WatchlistMembersRpc_RegisterAsync
      consumes:
        - application/json
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
        - multipart/form-data
        - application/octet-stream
      parameters:
        - name: Payload
          in: body
          description: >-
            JSON with WatchlistMember ExternalId (if item does not exist then it
            will be created), </br>

            ImageData with base64 encoded images of single face with MIME type,
            <br>

            Watchlist ExternalIds which will be linked to WatchlistMember (if
            watchlists do not exists then they will be created with default
            threshold).
          required: true
          schema:
            $ref: '#/definitions/RegisterWatchlistMemberData'
      responses:
        '204':
          description: WatchlistMember successfully registered.
        '400':
          description: Exactly one face expected on single Frame
  /api/v1/WatchlistMembers/AddExistingFace:
    post:
      tags:
        - api/v1/WatchlistMembers
      summary: >-
        Creates copy of Face entity by FaceId and this Face will be linked to
        WatchlistMember by WatchlistMemberId.
      operationId: WatchlistMembersRpc_AddExistingFace
      consumes:
        - application/json
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
        - multipart/form-data
        - application/octet-stream
      parameters:
        - name: Payload
          in: body
          description: JSON with FaceId and WatchlistMemberId.
          required: true
          schema:
            $ref: '#/definitions/AddExistingFaceToWatchlistMemberData'
      responses:
        '204':
          description: >-
            Creates copy of Face entity by FaceId and this Face will be linked
            to WatchlistMember by WatchlistMemberId.
        '400':
          description: FaceId is already linked to WatchlistMember.
        '404':
          description: FaceId or WatchlistMemberId does not exists.
        '409':
          description: Face is not extracted yet or some blob data is missing.
  /api/v1/WatchlistMembers/RemoveFace:
    post:
      tags:
        - api/v1/WatchlistMembers
      summary: Remove Face from WatchlistMember specified by FaceId and WatchlistMemberId.
      operationId: WatchlistMembersRpc_RemoveFace
      consumes:
        - application/json
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
        - multipart/form-data
        - application/octet-stream
      parameters:
        - name: Payload
          in: body
          description: JSON with FaceId and WatchlistMemberId.
          required: true
          schema:
            $ref: '#/definitions/RemoveExistingFaceFromWatchlistMemberData'
      responses:
        '204':
          description: >-
            Remove Face from WatchlistMember specified by FaceId and
            WatchlistMemberId.
        '400':
          description: Face with is not linked to WatchlistMember.
        '404':
          description: FaceId or WatchlistMemberId does not exists.
  /api/v1/WatchlistMembers/LinkToWatchlist:
    post:
      tags:
        - api/v1/WatchlistMembers
      summary: Links to watchlist.
      operationId: WatchlistMembers_LinkToWatchlist
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: Payload
          in: body
          description: >-
            JSON with WatchlistMember Ids and Watchlist Id that this
            WatchlistMembers will be linked to.
          required: true
          schema:
            required:
              - WatchlistMemberIds
              - WatchlistId
            type: object
            properties:
              WatchlistMemberIds:
                type: array
                items:
                  format: int64
                  type: integer
              WatchlistId:
                format: int64
                type: integer
      responses:
        '200':
          description: Link WatchlistMember to Watchlists.
      deprecated: false
  /api/v1/WatchlistMembers/UnlinkFromWatchlist:
    post:
      tags:
        - api/v1/WatchlistMembers
      summary: Unlink WatchlistMembers from watchlist.
      operationId: WatchlistMembers_UnlinkFromWatchlist
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: Payload
          in: body
          description: >-
            JSON with WatchlistMember Ids and Watchlist Id from which
            WatchlistMembers will be unlinked.
          required: true
          schema:
            required:
              - WatchlistMemberIds
              - WatchlistId
            type: object
            properties:
              WatchlistMemberIds:
                type: array
                items:
                  format: int64
                  type: integer
              WatchlistId:
                format: int64
                type: integer
      responses:
        '200':
          description: Unlink WatchlistMember from Watchlists.
      deprecated: false
  /api/v1/WatchlistMembers/Search:
    post:
      tags:
        - api/v1/WatchlistMembers
      summary: Search Image in WatchlistMembers
      operationId: WatchlistMembersRpc_SearchAsync
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
        - multipart/form-data
        - application/octet-stream
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
        - multipart/form-data
        - application/octet-stream
      parameters:
        - name: Payload
          in: body
          description: JSON with image data and search parameters
          required: true
          schema:
            $ref: '#/definitions/SearchByImageData'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/SearchByImageResponse'
        '400':
          description: At least one face expected on a Frame
      
  /api/v1/Watchlists:
    post:
      tags:
        - api/v1/Watchlists
      summary: Creates new Watchlist entity with provided data.
      operationId: Watchlists_Post
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: Payload
          in: body
          description: The entity to post
          required: true
          schema:
            $ref: '#/definitions/WatchlistData'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Watchlist'
      deprecated: false
  /api/v1/Watchlists/{Id}:
    get:
      tags:
        - api/v1/Watchlists
      summary: Gets the specified Watchlist by Id.
      operationId: Watchlists_GetById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of Watchlist that was requested.
          required: true
          type: integer
          format: int64
     
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Watchlist'
      deprecated: false
    delete:
      tags:
        - api/v1/Watchlists
      summary: Deletes the specified Watchlist.
      operationId: Watchlists_DeleteById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of Watchlist that will be deleted.
          required: true
          type: integer
          format: int64
      responses:
        '204':
          description: Success
        '404':
          description: Not found
      deprecated: false
    patch:
      tags:
        - api/v1/Watchlists
      summary: Updates specified Watchlist.
      operationId: Watchlists_PatchById
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of Watchlist that will be updated.
          required: true
          type: integer
          format: int64
        - name: Payload
          in: body
          description: The entity to patch
          required: true
          schema:
            $ref: '#/definitions/Watchlist'
      responses:
        '200':
          description: OK
          schema:
            type: object
      deprecated: false


  /odata/Scopes:
    get:
      tags:
        - odata/Scopes
      summary: Gets list of all Scopes present on the server.
      operationId: Scopes_Get
      consumes: []
      produces:
        - application/json
      parameters:
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $filter
          in: query
          description: 'Filters the results, based on a Boolean condition.'
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
        - name: $orderby
          in: query
          description: Sorts the results.
          required: false
          type: string
        - name: $top
          in: query
          description: Returns only the first n results.
          required: false
          type: integer
          format: int32
        - name: $skip
          in: query
          description: Skips the first n results.
          required: false
          type: integer
          format: int32
        - name: $count
          in: query
          description: Includes a count of the matching results in the response.
          required: false
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ODataResponse[List[Scope]]'
      deprecated: false
  '/odata/Scopes({Id})':
    get:
      tags:
        - odata/Scopes
      summary: Gets the specified Scope.
      operationId: Scopes_GetById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of Scope that was requested.
          required: true
          type: integer
          format: int64
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Scope'
      deprecated: false
  '/odata/Scopes(Id={id})/Frames':
    get:
      tags:
        - odata/Scopes
      summary: Gets Frames that belong to specified Scope.
      operationId: Scopes_GetFramesById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of Scope
          required: true
          type: integer
          format: int64
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $filter
          in: query
          description: 'Filters the results, based on a Boolean condition.'
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
        - name: $orderby
          in: query
          description: Sorts the results.
          required: false
          type: string
        - name: $top
          in: query
          description: Returns only the first n results.
          required: false
          type: integer
          format: int32
        - name: $skip
          in: query
          description: Skips the first n results.
          required: false
          type: integer
          format: int32
        - name: $count
          in: query
          description: Includes a count of the matching results in the response.
          required: false
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ODataResponse[List[Frame]]'
      deprecated: false
  '/odata/Scopes(Id={id})/Identities':
    get:
      tags:
        - odata/Scopes
      summary: Gets Identities that belong to specified scope.
      operationId: Scopes_GetIdentitiesById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of Scope
          required: true
          type: integer
          format: int64
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $filter
          in: query
          description: 'Filters the results, based on a Boolean condition.'
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
        - name: $orderby
          in: query
          description: Sorts the results.
          required: false
          type: string
        - name: $top
          in: query
          description: Returns only the first n results.
          required: false
          type: integer
          format: int32
        - name: $skip
          in: query
          description: Skips the first n results.
          required: false
          type: integer
          format: int32
        - name: $count
          in: query
          description: Includes a count of the matching results in the response.
          required: false
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ODataResponse[List[Identity]]'
      deprecated: false
  '/odata/Scopes(Id={id})/Groupings':
    get:
      tags:
        - odata/Scopes
      summary: Gets Groupings that belong to specified scope.
      operationId: Scopes_GetGroupingsById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of Scope
          required: true
          type: integer
          format: int64
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $filter
          in: query
          description: 'Filters the results, based on a Boolean condition.'
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
        - name: $orderby
          in: query
          description: Sorts the results.
          required: false
          type: string
        - name: $top
          in: query
          description: Returns only the first n results.
          required: false
          type: integer
          format: int32
        - name: $skip
          in: query
          description: Skips the first n results.
          required: false
          type: integer
          format: int32
        - name: $count
          in: query
          description: Includes a count of the matching results in the response.
          required: false
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ODataResponse[List[Grouping]]'
      deprecated: false
      
  /odata/VisualObjects:
    get:
      tags:
        - odata/VisualObjects
      summary: Gets list of all VisualObjects present on the server.
      operationId: VisualObjects_Get
      consumes: []
      produces:
        - application/json
      parameters:
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $filter
          in: query
          description: 'Filters the results, based on a Boolean condition.'
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
        - name: $orderby
          in: query
          description: Sorts the results.
          required: false
          type: string
        - name: $top
          in: query
          description: Returns only the first n results.
          required: false
          type: integer
          format: int32
        - name: $skip
          in: query
          description: Skips the first n results.
          required: false
          type: integer
          format: int32
        - name: $count
          in: query
          description: Includes a count of the matching results in the response.
          required: false
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ODataResponse[List[VisualObject]]'
      deprecated: false
  '/odata/VisualObjects({Id})':
    get:
      tags:
        - odata/VisualObjects
      summary: Gets the specified Face.
      operationId: VisualObjects_GetById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of Face which is requested.
          required: true
          type: integer
          format: int64
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/VisualObject'
      deprecated: false

  /odata/Faces:
    get:
      tags:
        - odata/Faces
      summary: Gets list of all Faces present on the server.
      operationId: Faces_Get
      consumes: []
      produces:
        - application/json
      parameters:
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $filter
          in: query
          description: 'Filters the results, based on a Boolean condition.'
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
        - name: $orderby
          in: query
          description: Sorts the results.
          required: false
          type: string
        - name: $top
          in: query
          description: Returns only the first n results.
          required: false
          type: integer
          format: int32
        - name: $skip
          in: query
          description: Skips the first n results.
          required: false
          type: integer
          format: int32
        - name: $count
          in: query
          description: Includes a count of the matching results in the response.
          required: false
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ODataResponse[List[Face]]'
      deprecated: false
  '/odata/Faces({Id})':
    get:
      tags:
        - odata/Faces
      summary: Gets the specified Face.
      operationId: Faces_GetById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of Face which is requested.
          required: true
          type: integer
          format: int64
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Face'
      deprecated: false
      
  /odata/Tracklets:
    get:
      tags:
        - odata/Tracklets
      summary: Gets list of all Tracklets on the server.
      operationId: Tracklets_Get
      consumes: []
      produces:
        - application/json
      parameters:
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $filter
          in: query
          description: 'Filters the results, based on a Boolean condition.'
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
        - name: $orderby
          in: query
          description: Sorts the results.
          required: false
          type: string
        - name: $top
          in: query
          description: Returns only the first n results.
          required: false
          type: integer
          format: int32
        - name: $skip
          in: query
          description: Skips the first n results.
          required: false
          type: integer
          format: int32
        - name: $count
          in: query
          description: Includes a count of the matching results in the response.
          required: false
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ODataResponse[List[Tracklet]]'
      deprecated: false
  '/odata/Tracklets({Id})':
    get:
      tags:
        - odata/Tracklets
      summary: Gets the specified Tracklet.
      operationId: Tracklets_GetById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of requested Tracklet.
          required: true
          type: integer
          format: int64
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Tracklet'
      deprecated: false
      
  /odata/Identities:
    get:
      tags:
        - odata/Identities
      summary: Gets list of all Identities present on the server.
      operationId: Identities_Get
      consumes: []
      produces:
        - application/json
      parameters:
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $filter
          in: query
          description: 'Filters the results, based on a Boolean condition.'
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
        - name: $orderby
          in: query
          description: Sorts the results.
          required: false
          type: string
        - name: $top
          in: query
          description: Returns only the first n results.
          required: false
          type: integer
          format: int32
        - name: $skip
          in: query
          description: Skips the first n results.
          required: false
          type: integer
          format: int32
        - name: $count
          in: query
          description: Includes a count of the matching results in the response.
          required: false
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ODataResponse[List[Identity]]'
      deprecated: false
  '/odata/Identities({Id})':
    get:
      tags:
        - odata/Identities
      summary: Gets the specified Identity.
      operationId: Identities_GetById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of Identity which is requested.
          required: true
          type: integer
          format: int64
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Identity'
      deprecated: false
  '/odata/Identities(Id={id})/Frames':
    get:
      tags:
        - odata/Identities
      summary: Gets the Frames that belong to specified Identity.
      operationId: Identities_GetFramesById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of Identity.
          required: true
          type: integer
          format: int64
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $filter
          in: query
          description: 'Filters the results, based on a Boolean condition.'
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
        - name: $orderby
          in: query
          description: Sorts the results.
          required: false
          type: string
        - name: $top
          in: query
          description: Returns only the first n results.
          required: false
          type: integer
          format: int32
        - name: $skip
          in: query
          description: Skips the first n results.
          required: false
          type: integer
          format: int32
        - name: $count
          in: query
          description: Includes a count of the matching results in the response.
          required: false
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ODataResponse[List[Frame]]'
      deprecated: false
  '/odata/Identities(Id={id})/Faces':
    get:
      tags:
        - odata/Identities
      summary: Gets the faces that belong to Identity with Id.
      operationId: Identities_GetFacesById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of Identity.
          required: true
          type: integer
          format: int64
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $filter
          in: query
          description: 'Filters the results, based on a Boolean condition.'
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
        - name: $orderby
          in: query
          description: Sorts the results.
          required: false
          type: string
        - name: $top
          in: query
          description: Returns only the first n results.
          required: false
          type: integer
          format: int32
        - name: $skip
          in: query
          description: Skips the first n results.
          required: false
          type: integer
          format: int32
        - name: $count
          in: query
          description: Includes a count of the matching results in the response.
          required: false
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ODataResponse[List[Face]]'
      deprecated: false
      
  /odata/Groupings:
    get:
      tags:
        - odata/Groupings
      summary: Gets list of all Groupings present on the server.
      operationId: Groupings_Get
      consumes: []
      produces:
        - application/json
      parameters:
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $filter
          in: query
          description: 'Filters the results, based on a Boolean condition.'
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
        - name: $orderby
          in: query
          description: Sorts the results.
          required: false
          type: string
        - name: $top
          in: query
          description: Returns only the first n results.
          required: false
          type: integer
          format: int32
        - name: $skip
          in: query
          description: Skips the first n results.
          required: false
          type: integer
          format: int32
        - name: $count
          in: query
          description: Includes a count of the matching results in the response.
          required: false
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ODataResponse[List[Grouping]]'
      deprecated: false
  '/odata/Groupings({Id})':
    get:
      tags:
        - odata/Groupings
      summary: Gets the specified Grouping.
      operationId: Groupings_GetById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of Grouping which is requested.
          required: true
          type: integer
          format: int64
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Grouping'
      deprecated: false
  '/odata/Groupings(Id={id})/Identities':
    get:
      tags:
        - odata/Groupings
      summary: Gets list of all Identities which belong to specified Grouping.
      operationId: Groupings_GetIdentitiesById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of Grouping.
          required: true
          type: integer
          format: int64
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $filter
          in: query
          description: 'Filters the results, based on a Boolean condition.'
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
        - name: $orderby
          in: query
          description: Sorts the results.
          required: false
          type: string
        - name: $top
          in: query
          description: Returns only the first n results.
          required: false
          type: integer
          format: int32
        - name: $skip
          in: query
          description: Skips the first n results.
          required: false
          type: integer
          format: int32
        - name: $count
          in: query
          description: Includes a count of the matching results in the response.
          required: false
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ODataResponse[List[Identity]]'
      deprecated: false
      
  /odata/Frames:
    get:
      tags:
        - odata/Frames
      summary: Gets list of all Frames present on the server.
      operationId: Frames_Get
      consumes: []
      produces:
        - application/json
      parameters:
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $filter
          in: query
          description: 'Filters the results, based on a Boolean condition.'
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
        - name: $orderby
          in: query
          description: Sorts the results.
          required: false
          type: string
        - name: $top
          in: query
          description: Returns only the first n results.
          required: false
          type: integer
          format: int32
        - name: $skip
          in: query
          description: Skips the first n results.
          required: false
          type: integer
          format: int32
        - name: $count
          in: query
          description: Includes a count of the matching results in the response.
          required: false
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ODataResponse[List[Frame]]'
      deprecated: false
  '/odata/Frames({Id})':
    get:
      tags:
        - odata/Frames
      summary: Gets the specified Frame by Id.
      operationId: Frames_GetById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of Frame that was requested.
          required: true
          type: integer
          format: int64
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Frame'
      deprecated: false
  '/odata/Frames(Id={id})/Identities':
    get:
      tags:
        - odata/Frames
      summary: Gets Identities that belong to specified Frame.
      operationId: Frames_GetIdentitiesById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of Frame
          required: true
          type: integer
          format: int64
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $filter
          in: query
          description: 'Filters the results, based on a Boolean condition.'
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
        - name: $orderby
          in: query
          description: Sorts the results.
          required: false
          type: string
        - name: $top
          in: query
          description: Returns only the first n results.
          required: false
          type: integer
          format: int32
        - name: $skip
          in: query
          description: Skips the first n results.
          required: false
          type: integer
          format: int32
        - name: $count
          in: query
          description: Includes a count of the matching results in the response.
          required: false
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ODataResponse[List[Identity]]'
      deprecated: false
  '/odata/Frames(Id={id})/Faces':
    get:
      tags:
        - odata/Frames
      summary: Gets Faces that belong to specified Frame.
      operationId: Frames_GetFacesById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of Frame
          required: true
          type: integer
          format: int64
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $filter
          in: query
          description: 'Filters the results, based on a Boolean condition.'
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
        - name: $orderby
          in: query
          description: Sorts the results.
          required: false
          type: string
        - name: $top
          in: query
          description: Returns only the first n results.
          required: false
          type: integer
          format: int32
        - name: $skip
          in: query
          description: Skips the first n results.
          required: false
          type: integer
          format: int32
        - name: $count
          in: query
          description: Includes a count of the matching results in the response.
          required: false
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ODataResponse[List[Face]]'
      deprecated: false
      
  /odata/Streams:
    get:
      tags:
        - odata/Streams
      summary: Gets list of all streams on the server.
      operationId: Streams_Get
      consumes: []
      produces:
        - application/json
      parameters:
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $filter
          in: query
          description: 'Filters the results, based on a Boolean condition.'
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
        - name: $orderby
          in: query
          description: Sorts the results.
          required: false
          type: string
        - name: $top
          in: query
          description: Returns only the first n results.
          required: false
          type: integer
          format: int32
        - name: $skip
          in: query
          description: Skips the first n results.
          required: false
          type: integer
          format: int32
        - name: $count
          in: query
          description: Includes a count of the matching results in the response.
          required: false
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ODataResponse[List[Stream]]'
      deprecated: false
  '/odata/Streams({Id})':
    get:
      tags:
        - odata/Streams
      summary: Gets the specified Stream.
      operationId: Streams_GetById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of requested Stream.
          required: true
          type: integer
          format: int64
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Stream'
      deprecated: false
      
  /odata/WatchlistMembers:
    get:
      tags:
        - odata/WatchlistMembers
      summary: Gets list of all WatchlistMembers present on the server.
      operationId: WatchlistMembers_Get
      consumes: []
      produces:
        - application/json
      parameters:
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $filter
          in: query
          description: 'Filters the results, based on a Boolean condition.'
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
        - name: $orderby
          in: query
          description: Sorts the results.
          required: false
          type: string
        - name: $top
          in: query
          description: Returns only the first n results.
          required: false
          type: integer
          format: int32
        - name: $skip
          in: query
          description: Skips the first n results.
          required: false
          type: integer
          format: int32
        - name: $count
          in: query
          description: Includes a count of the matching results in the response.
          required: false
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ODataResponse[List[WatchlistMember]]'
      deprecated: false
  '/odata/WatchlistMembers({Id})':
    get:
      tags:
        - odata/WatchlistMembers
      summary: Gets the specified WatchlistMember by Id.
      operationId: WatchlistMembers_GetById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of WatchlistMember that was requested.
          required: true
          type: integer
          format: int64
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/WatchlistMember'
      deprecated: false
      
  /odata/Watchlists:
    get:
      tags:
        - odata/Watchlists
      summary: Gets list of all Watchlists present on the server.
      operationId: Watchlists_Get
      consumes: []
      produces:
        - application/json
      parameters:
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $filter
          in: query
          description: 'Filters the results, based on a Boolean condition.'
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
        - name: $orderby
          in: query
          description: Sorts the results.
          required: false
          type: string
        - name: $top
          in: query
          description: Returns only the first n results.
          required: false
          type: integer
          format: int32
        - name: $skip
          in: query
          description: Skips the first n results.
          required: false
          type: integer
          format: int32
        - name: $count
          in: query
          description: Includes a count of the matching results in the response.
          required: false
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ODataResponse[List[Watchlist]]'
      deprecated: false
  '/odata/Watchlists({Id})':
    get:
      tags:
        - odata/Watchlists
      summary: Gets the specified Watchlist by Id.
      operationId: Watchlists_GetById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of Watchlist that was requested.
          required: true
          type: integer
          format: int64
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Watchlist'
      deprecated: false
      
  /odata/WlHits:
    get:
      tags:
        - odata/WlHits
      summary: Gets list of all WlHits present on the server.
      operationId: WlHits_Get
      consumes: []
      produces:
        - application/json
      parameters:
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $filter
          in: query
          description: 'Filters the results, based on a Boolean condition.'
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
        - name: $orderby
          in: query
          description: Sorts the results.
          required: false
          type: string
        - name: $top
          in: query
          description: Returns only the first n results.
          required: false
          type: integer
          format: int32
        - name: $skip
          in: query
          description: Skips the first n results.
          required: false
          type: integer
          format: int32
        - name: $count
          in: query
          description: Includes a count of the matching results in the response.
          required: false
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ODataResponse[List[WlHit]]'
      deprecated: false
  '/odata/WlHits({Id})':
    get:
      tags:
        - odata/WlHits
      summary: Gets the specified WlHit.
      operationId: WlHits_GetById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: Id
          in: path
          description: Id of WlHit that was requested.
          required: true
          type: integer
          format: int64
        - name: $expand
          in: query
          description: Expands related entities inline.
          required: false
          type: string
        - name: $select
          in: query
          description: Selects which properties to include in the response.
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/WlHit'
      deprecated: false
definitions:
  DbCleanUpConfig:
    type: "object"
    properties: 
      MaxFramesCount:
        type: "integer"
        format: "int64"
      MaxImageDataAge:
        type: "integer"
        format: "int64"
        example: 14
      CleanupAmount:
        type: "integer"
        format: "int64"
        example: 20
      CleanupStart:
        type: "string"
        example: "02:00:00"
      Enabled:
        type: boolean
        example: true
        
  ExtractorConfig:
    type: "object"
    properties: 
      ExtractorsCount:
        type: "integer"
        format: "int64"
        example: 3
      GpuEnabled:
        type: boolean
        example: true
        
  FaceHandlerConfig:
    type: "object"
    properties: 
      MinFaceSize:
        type: "integer"
        format: "int64"
        example: 20
      MaxFaceSize:
        type: "integer"
        format: "int64"
        example: 300
      MaxFaces:
        type: "integer"
        format: "int64"
        example: 10
      FaceDetectionConfidenceThreshold:
        type: "integer"
        format: "int64"
        example: 900
      FaceDetSpeedAccuracyMode:
        type: "string"
        example: "accurate_server"
      Enabled:
        type: boolean
        example: true

  LiveGrouping:
    type: "object"
    properties:
      Id:
        type: "string"
        example: "9a4e0102-704f-4c4c-a783-6d2140010b08"
      Description:
        type: "string"
        example: "reception"
      Config:
        $ref: '#/definitions/LiveGroupingConfig'
        
  ListLiveGrouping:
    required: []
    type: object
    properties:
      value:
        type: array
        items:
          $ref: '#/definitions/LiveGrouping'

  LiveGroupingConfig:
    type: "object"
    properties: 
      Step:
        type: "integer"
        format: "int64"
        example: 20
      SlidingWindow:
        type: "integer"
        format: "int64"
        example: 3600
      Threshold:
        type: "integer"
        format: "int64"
        example: 25
      Strategy:
        type: "string"
        example: "receptionfg.strategy.average"

  RecordingsGrouping:
    type: "object"
    properties:
      Id:
        type: "string"
        example: "dfc7279f-d103-41eb-88f3-422d6cb22612"
      Description:
        type: "string"
        example: "bank robbery"
      Config:
        $ref: '#/definitions/RecordingsGroupingConfig'
        
  ListRecordingsGrouping:
    required: []
    type: object
    properties:
      value:
        type: array
        items:
          $ref: '#/definitions/RecordingsGrouping'

  RecordingsGroupingConfig:
    type: "object"
    properties: 
      Threshold:
        type: "integer"
        format: "int64"
        example: 25
      Strategy:
        type: "string"
        example: "receptionfg.strategy.average"
          
  StreamData:
    type: "object"
    properties:
      CameraId:
        type: "string"
        example: "301a8203-ec3e-4c1b-ba29-40a82c2c4cd5"
      Description:
        type: "string"
        example: "bank entrance"

  LiveCamera:
    type: "object"
    properties:
      Id:
        type: "string"
        example: "301a8203-ec3e-4c1b-ba29-40a82c2c4cd5"
      Name:
        type: "string"
        example: "bank entrance"
      Source:
        type: "string"
        example: "rtsp://cam1"
      GpuDetection:
        type: boolean
        example: true
      Enabled:
        type: boolean
        example: true
      ObjectDetectionEnabled:
        type: boolean
        example: true
      FaceDetection:
        $ref: '#/definitions/FaceHandlerConfig'
        
  ListLiveCamera:
    type: object
    properties:
      value:
        type: array
        items:
          $ref: '#/definitions/LiveCamera'
  
  VideoRecord:
    type: "object"
    properties:
      Id:
        type: "string"
        example: "eb4d2ab7-8cf4-4114-a251-cc2a1edebd4b"
      Name:
        type: "string"
        example: "bank entrance"
      Source:
        type: "string"
        example: "http://vid.mpeg4" 
      GpuDetection:
        type: boolean
        example: true
      Enabled:
        type: boolean
        example: true
      ObjectDetectionEnabled:
        type: boolean
        example: true
      FaceDetection:
        $ref: '#/definitions/FaceHandlerConfig'
        
  ListVideoRecord:
    type: object
    properties:
      value:
        type: array
        items:
          $ref: '#/definitions/LiveCamera'
          
  LicenseCheckResponse:
    required:
      - Licenses
      - Validity
    type: object
    properties:
      Validity:
        enum:
          - Valid
          - Invalid
          - Unknown
        type: string
      Licenses:
        type: array
        items:
          $ref: '#/definitions/LicenseStatus'
  LicenseStatus:
    required:
      - License
      - Validity
    type: object
    properties:
      License:
        type: string
      Validity:
        enum:
          - Valid
          - Invalid
          - Unknown
        type: string
      Note:
        type: string
  RegisterWatchlistMemberData:
    required:
      - ExternalId
      - ImageData
      - WatchlistExternalIds
    type: object
    properties:
      ExternalId:
        type: string
      ImageData:
        type: array
        items:
          $ref: '#/definitions/RegisterWatchlistMemberImageData'
      WatchlistExternalIds:
        type: array
        items:
          type: string
  RegisterWatchlistMemberImageData:
    required:
      - Data
      - MIME
    type: object
    properties:
      Data:
        format: byte
        type: string
      MIME:
        pattern: image\/(png|jpeg)
        type: string
  AddExistingFaceToWatchlistMemberData:
    description: Data required for adding cloned face to WatchlistMember.
    required:
      - FaceId
      - WatchlistMemberId
    type: object
    properties:
      FaceId:
        format: int64
        description: FaceId to clone.
        type: integer
      WatchlistMemberId:
        format: int64
        description: WatchlistMember Id that cloned face will be linked to.
        type: integer
  RemoveExistingFaceFromWatchlistMemberData:
    description: Data required for removing face from WatchlistMember.
    required:
      - FaceId
      - WatchlistMemberId
    type: object
    properties:
      FaceId:
        format: int64
        description: FaceId to remove.
        type: integer
      WatchlistMemberId:
        format: int64
        description: WatchlistMember Id that face should be removed from.
        type: integer
  SearchByImageData:
    required:
      - Image
    type: object
    properties:
      Image:
        $ref: '#/definitions/ImageData'
      WatchlistIds:
        type: array
        items:
          format: int64
          type: integer
      Threshold:
        format: int32
        type: integer
      MaxResultCount:
        format: int32
        type: integer
  ImageData:
    required:
      - Data
      - MIME
    type: object
    properties:
      Data:
        format: byte
        type: string
      MIME:
        pattern: image\/(png|jpeg)
        type: string
  SearchByImageResponse:
    required: []
    type: object
    properties:
      CropLeftTopX:
        format: double
        type: number
      CropLeftTopY:
        format: double
        type: number
      CropRightTopX:
        format: double
        type: number
      CropRightTopY:
        format: double
        type: number
      CropLeftBottomX:
        format: double
        type: number
      CropLeftBottomY:
        format: double
        type: number
      CropRightBottomX:
        format: double
        type: number
      CropRightBottomY:
        format: double
        type: number
      Quality:
        format: int32
        type: integer
      LeftEyeX:
        format: double
        type: number
      LeftEyeY:
        format: double
        type: number
      RightEyeX:
        format: double
        type: number
      RightEyeY:
        format: double
        type: number
      Age:
        format: double
        type: number
      Gender:
        format: double
        type: number
      GenderFormatted:
        enum:
          - Male
          - Female
        type: string
      MatchResults:
        type: array
        items:
          $ref: '#/definitions/SearchByImageMatchResult'
  SearchByImageMatchResult:
    required: []
    type: object
    properties:
      Score:
        format: int32
        type: integer
      WatchlistMemberId:
        format: int64
        type: integer
      ExternalId:
        type: string
      DisplayName:
        type: string
      FullName:
        type: string
      WatchlistId:
        format: int64
        type: integer
      WatchlistDisplayName:
        type: string
      WatchlistFullName:
        type: string
      WatchlistExternalId:
        type: string
  'ODataResponse[List[Camera]]':
    required: []
    type: object
    properties:
      '@odata.context':
        type: string
      value:
        type: array
        items:
          $ref: '#/definitions/Camera'
  Camera:
    required:
      - Id
      - StreamId
      - StreamWorkerId
      - VideoPublishWorkerId
      - CreatedAt
    type: object
    properties:
      Id:
        format: int64
        type: integer
      StreamId:
        format: int64
        type: integer
      StreamWorkerId:
        format: int64
        type: integer
      VideoPublishWorkerId:
        format: int64
        type: integer
      CreatedAt:
        format: date-time
        type: string
      UpdatedAt:
        format: date-time
        type: string
  Stream:
    required:
      - Id
      - ScopeId
      - CreatedAt
    type: object
    properties:
      Id:
        format: int64
        type: integer
        readOnly: true
      ScopeId:
        format: int64
        type: integer
        readOnly: true
      CreatedAt:
        format: date-time
        type: string
        readOnly: true
      UpdatedAt:
        format: date-time
        type: string
        readOnly: true
      Description:
        type: string
        example: New description
      Name:
        type: string
        example: New name
  InputFile:
    required:
      - Id
      - StreamId
      - StreamWorkerId
      - VideoPublishWorkerId
      - State
      - CreatedAt
    type: object
    properties:
      Id:
        format: int64
        type: integer
      StreamId:
        format: int64
        type: integer
      StreamWorkerId:
        format: int64
        type: integer
      VideoPublishWorkerId:
        format: int64
        type: integer
      State:
        enum:
          - Ready
          - Processing
          - Processed
          - Error
        type: string
      CreatedAt:
        format: date-time
        type: string
      UpdatedAt:
        format: date-time
        type: string

  VisualObject:
    required:
      - TrackletId
      - Quality
      - State
      - CreatedAt
      - CropLeftTopX
      - CropLeftTopY
      - CropRightTopX
      - CropRightTopY
      - CropLeftBottomX
      - CropLeftBottomY
      - CropRightBottomX
      - CropRightBottomY
      - FrameId
      - Id
    type: object
    properties:
      TrackletId:
        format: int64
        type: integer
      Quality:
        format: int32
        type: integer
      Type:
        enum:
          - Body
          - Face
          - Gun
        type: string
      ImageDataId:
        format: uuid
        type: string
        example: 00000000-0000-0000-0000-000000000000
      CreatedAt:
        format: date-time
        type: string
      UpdatedAt:
        format: date-time
        type: string
      ProcessedAt:
        format: date-time
        type: string
      CropLeftTopX:
        format: double
        type: number
      CropLeftTopY:
        format: double
        type: number
      CropRightTopX:
        format: double
        type: number
      CropRightTopY:
        format: double
        type: number
      CropLeftBottomX:
        format: double
        type: number
      CropLeftBottomY:
        format: double
        type: number
      CropRightBottomX:
        format: double
        type: number
      CropRightBottomY:
        format: double
        type: number
      FrameId:
        format: int64
        type: integer
      Id:
        format: uuid
        type: string
        example: 00000000-0000-0000-0000-000000000000
      StreamId:
        format: int64
        type: integer
      ImageUrl:
        type: string

  Face:
    required:
      - TrackletId
      - Quality
      - State
      - CreatedAt
      - CropLeftTopX
      - CropLeftTopY
      - CropRightTopX
      - CropRightTopY
      - CropLeftBottomX
      - CropLeftBottomY
      - CropRightBottomX
      - CropRightBottomY
      - FrameId
      - Id
    type: object
    properties:
      TrackletId:
        format: int64
        type: integer
      Quality:
        format: int32
        type: integer
      State:
        enum:
          - New
          - Extracting
          - Extracted
          - Error
        type: string
      ImageDataId:
        format: uuid
        type: string
        example: 00000000-0000-0000-0000-000000000000
      CreatedAt:
        format: date-time
        type: string
      UpdatedAt:
        format: date-time
        type: string
      ProcessedAt:
        format: date-time
        type: string
      CropLeftTopX:
        format: double
        type: number
      CropLeftTopY:
        format: double
        type: number
      CropRightTopX:
        format: double
        type: number
      CropRightTopY:
        format: double
        type: number
      CropLeftBottomX:
        format: double
        type: number
      CropLeftBottomY:
        format: double
        type: number
      CropRightBottomX:
        format: double
        type: number
      CropRightBottomY:
        format: double
        type: number
      LeftEyeX:
        format: double
        type: number
      LeftEyeY:
        format: double
        type: number
      RightEyeX:
        format: double
        type: number
      RightEyeY:
        format: double
        type: number
      FrameId:
        format: int64
        type: integer
      Id:
        format: uuid
        type: string
        example: 00000000-0000-0000-0000-000000000000
      Age:
        format: double
        type: number
      Gender:
        format: double
        type: number
      StreamId:
        format: int64
        type: integer
      ImageUrl:
        type: string
      GenderFormatted:
        enum:
          - Male
          - Female
        type: string
  Tracklet:
    required:
      - ScopeId
      - CreatedAt
      - TimeAppeared
      - Id
    type: object
    properties:
      ScopeId:
        format: int64
        type: integer
      CreatedAt:
        format: date-time
        type: string
      UpdatedAt:
        format: date-time
        type: string
      TimeAppeared:
        format: date-time
        type: string
      TimeDisappeared:
        format: date-time
        type: string
      StreamId:
        format: int64
        type: integer
      Id:
        format: uuid
        type: string
        example: 00000000-0000-0000-0000-000000000000
  Frame:
    required:
      - State
      - ScopeId
      - CreatedAt
      - Id
    type: object
    properties:
      State:
        enum:
          - New
          - Processing
          - Processed
          - Error
        type: string
      ScopeId:
        format: int64
        type: integer
      StreamId:
        format: int64
        type: integer
      ImageDataId:
        format: uuid
        type: string
        example: 00000000-0000-0000-0000-000000000000
      CreatedAt:
        format: date-time
        type: string
      UpdatedAt:
        format: date-time
        type: string
      ReceivedAt:
        format: date-time
        type: string
      Id:
        format: uuid
        type: string
        example: 00000000-0000-0000-0000-000000000000
      ImageUrl:
        type: string
  Scope:
    required:
      - Id
      - Type
      - CreatedAt
    type: object
    properties:
      Id:
        format: int64
        type: integer
        readOnly: true
      Description:
        type: string
        example: New description
      Type:
        enum:
          - Event
          - Location
          - Watchlist
        type: string
        readOnly: true
      CreatedAt:
        format: date-time
        type: string
        readOnly: true
      UpdatedAt:
        format: date-time
        type: string
        readOnly: true
  FaceAttribute:
    required:
      - FaceId
      - FaceAttributeType
      - Value
      - CreatedAt
      - Id
    type: object
    properties:
      FaceId:
        format: int64
        type: integer
      FaceAttributeType:
        enum:
          - Age
          - Gender
        type: string
      Value:
        format: double
        type: number
      CreatedAt:
        format: date-time
        type: string
      UpdatedAt:
        format: date-time
        type: string
      Id:
        format: int64
        type: integer
      ValueFormatted:
        type: string
  Identity:
    required:
      - Id
      - GroupingId
      - CreatedAt
      - Hidden
      - BestFaceId
    type: object
    properties:
      Id:
        format: int64
        type: integer
        readOnly: true
      GroupingId:
        format: int64
        type: integer
        readOnly: true
      CreatedAt:
        format: date-time
        type: string
        readOnly: true
      UpdatedAt:
        format: date-time
        type: string
        readOnly: true
      EntranceTime:
        format: date-time
        type: string
        readOnly: true
      ExitTime:
        format: date-time
        type: string
        readOnly: true
      Hidden:
        type: boolean
        example: true
      BestFaceId:
        format: int64
        type: integer
        readOnly: true
  WatchlistMember:
    required:
      - Id
      - CreatedAt
      - TrackletId
    type: object
    properties:
      Id:
        format: int64
        type: integer
        readOnly: true
      ExternalId:
        type: string
        example: '120'
      DisplayName:
        type: string
        example: Watchlist name
      FullName:
        type: string
        example: Watchlist full name
      Note:
        type: string
        example: Example note
      CreatedAt:
        format: date-time
        type: string
        readOnly: true
      UpdatedAt:
        format: date-time
        type: string
        readOnly: true
      TrackletId:
        format: int64
        type: integer
        readOnly: true
  Grouping:
    required:
      - Id
      - ScopeId
      - CreatedAt
      - State
      - IsDefault
    type: object
    properties:
      Id:
        format: int64
        type: integer
      ScopeId:
        format: int64
        type: integer
      CreatedAt:
        format: date-time
        type: string
      UpdatedAt:
        format: date-time
        type: string
      ProcessedAt:
        format: date-time
        type: string
      State:
        enum:
          - Ready
          - Processing
          - Pending
          - Error
        type: string
      IsDefault:
        type: boolean
      LastProcessedTrackletId:
        format: int64
        type: integer
      NextIterationTimeStamp:
        format: date-time
        type: string
  Watchlist:
    required:
      - Id
      - DisplayName
      - FullName
      - CreatedAt
      - Threshold
    type: object
    properties:
      Id:
        format: int64
        type: integer
        readOnly: true
      DisplayName:
        type: string
        example: Watchlist name
      FullName:
        type: string
        example: Watchlist full name
      CreatedAt:
        format: date-time
        type: string
        readOnly: true
      UpdatedAt:
        format: date-time
        type: string
        readOnly: true
      Threshold:
        format: int32
        type: integer
        example: 50
      ExternalId:
        type: string
        readOnly: true
  StreamSourceData:
    description: Camera data required for camera creation.
    required:
      - VideoSource
      - Enable
    type: object
    properties:
      VideoSource:
        description: Camera video source.
        type: string
        example: rtsp://video
      Enable:
        description: >-
          Value indicating whether this Camera workers should be enabled after
          creation.
        type: boolean
      StreamName:
        description: Name of camera stream.
        type: string
        example: Elevator camera 1
  'ODataResponse[List[Config]]':
    required: []
    type: object
    properties:
      '@odata.context':
        type: string
      value:
        type: array
        items:
          $ref: '#/definitions/Config'
  Config:
    required:
      - Context'
      - Name
      - Configuration
      - CreatedAt
    type: object
    properties:
      Context:
        type: string
      Name:
        type: string
      Configuration:
        type: string
      CreatedAt:
        format: date-time
        type: string
      UpdatedAt:
        format: date-time
        type: string
  UpdateConfigValueData:
    description: Wrapper class for updating of configuration property.
    required:
      - Name
      - Context
      - Property
      - Value
    type: object
    properties:
      Name:
        description: Gets or sets the name.
        type: string
      Context:
        description: Gets or sets the context.
        type: string
      Property:
        description: Gets or sets the property.
        type: string
      Value:
        description: Gets or sets the value.
        type: string
  'ODataResponse[List[Face]]':
    required: []
    type: object
    properties:
      '@odata.context':
        type: string
      value:
        type: array
        items:
          $ref: '#/definitions/Face'
  'ODataResponse[List[Grouping]]':
    required: []
    type: object
    properties:
      '@odata.context':
        type: string
      value:
        type: array
        items:
          $ref: '#/definitions/Grouping'
  'ODataResponse[List[Identity]]':
    required: []
    type: object
    properties:
      '@odata.context':
        type: string
      value:
        type: array
        items:
          $ref: '#/definitions/Identity'
  'ODataResponse[Int64]':
    required: []
    type: object
    properties:
      '@odata.context':
        type: string
      value:
        format: int64
        type: integer
  'ODataResponse[List[Frame]]':
    required: []
    type: object
    properties:
      '@odata.context':
        type: string
      value:
        type: array
        items:
          $ref: '#/definitions/Frame'
  'ODataResponse[List[InputFile]]':
    required: []
    type: object
    properties:
      '@odata.context':
        type: string
      value:
        type: array
        items:
          $ref: '#/definitions/InputFile'
  'ODataResponse[List[Tracklet]]':
    required: []
    type: object
    properties:
      '@odata.context':
        type: string
      value:
        type: array
        items:
          $ref: '#/definitions/Tracklet'
  FrameData:
    description: Model of Frame with data in it
    required:
      - Data
      - ScopeId
    type: object
    properties:
      Data:
        format: byte
        description: Raw image data.
        type: string
      ScopeId:
        format: int64
        description: Scope identifier.
        type: integer
  'ODataResponse[List[BulkResponseData]]':
    required: []
    type: object
    properties:
      '@odata.context':
        type: string
      value:
        type: array
        items:
          $ref: '#/definitions/BulkResponseData'
  BulkResponseData:
    description: Response data model for bulk operations.
    required:
      - Id
      - OpResult
    type: object
    properties:
      Id:
        format: int64
        description: 'Id of not deleted Frame, in case of error.'
        type: integer
      OpResult:
        description: Reason why Frame with Id could not be deleted.
        enum:
          - NotFound
          - Error
        type: string
  Version:
    description: Represents information about SmartFace version.
    required:
      - Id
      - DatabaseVersion
      - DatabaseVersionCreationTime
      - DatabaseVersionUpdatedTime
      - AssemblyVersion
      - AssemblyLastModifiedTime
    type: object
    properties:
      Id:
        format: int32
        description: Gets or sets the identifier.
        type: integer
      DatabaseVersion:
        description: Gets or sets the database version.
        type: string
      DatabaseVersionCreationTime:
        format: date-time
        description: Gets or sets the database version creation time.
        type: string
      DatabaseVersionUpdatedTime:
        format: date-time
        description: Gets or sets the database version updated time.
        type: string
      AssemblyVersion:
        description: Gets or sets the assembly version.
        type: string
      AssemblyLastModifiedTime:
        format: date-time
        description: Gets or sets the assembly last modified time.
        type: string
  'ODataResponse[List[Scope]]':
    required: []
    type: object
    properties:
      '@odata.context':
        type: string
      value:
        type: array
        items:
          $ref: '#/definitions/Scope'
  ScopeData:
    description: Model data for Scope creation.
    required:
      - Type
    type: object
    properties:
      Type:
        description: Type of scope.
        enum:
          - Event
          - Location
          - Watchlist
        type: string
      Description:
        description: Description of Scope.
        type: string
  ScopeState:
    description: Copy of ProgressMessageDTO
    required:
      - ScopeId
      - NumNewFrames
      - NumUnprocFrames
      - Status
    type: object
    properties:
      ScopeId:
        format: int64
        description: Gets or sets the scope identifier.
        type: integer
      NumNewFrames:
        format: int32
        description: Gets or sets the number new Frames.
        type: integer
      NumUnprocFrames:
        format: int32
        description: Gets or sets the number unproc Frames.
        type: integer
      Status:
        description: Gets or sets the grouping status.
        enum:
          - Processing
          - Ready
        type: string
  'ODataResponse[List[Stream]]':
    required: []
    type: object
    properties:
      '@odata.context':
        type: string
      value:
        type: array
        items:
          $ref: '#/definitions/Stream'
  'ODataResponse[List[WatchlistMember]]':
    required: []
    type: object
    properties:
      '@odata.context':
        type: string
      value:
        type: array
        items:
          $ref: '#/definitions/WatchlistMember'
  WatchlistMemberCreateData:
    description: Model for creation of new WatchlistMember.
    required: []
    type: object
    properties:
      DisplayName:
        description: Gets or sets the display name.
        maxLength: 200
        minLength: 0
        type: string
        example: John C. Doe
      FullName:
        description: Gets or sets the full name.
        maxLength: 200
        minLength: 0
        type: string
        example: John Clarke Doe
      ExternalId:
        description: Gets or sets the external identifier.
        maxLength: 100
        minLength: 0
        type: string
        example: customer_4325989
      Note:
        description: Gets or sets the note.
        type: string
        example: valuable client
  'ODataResponse[List[Watchlist]]':
    required: []
    type: object
    properties:
      '@odata.context':
        type: string
      value:
        type: array
        items:
          $ref: '#/definitions/Watchlist'
  WatchlistData:
    description: Model for creation of new Watchlist.
    required:
      - DisplayName
      - FullName
    type: object
    properties:
      DisplayName:
        description: DisplayName of Watchlist.
        type: string
        example: VIP customers
      FullName:
        description: FullName of new Watchlist.
        type: string
        example: Customers with gold membership
      Threshold:
        format: int32
        description: Threshold of new Watchlist.
        maximum: 100
        minimum: 0
        type: integer
        example: 40
      ExternalId:
        description: Gets or sets the external identifier.
        type: string
        example: clientList_gold
  'ODataResponse[List[WlHit]]':
    required: []
    type: object
    properties:
      '@odata.context':
        type: string
      value:
        type: array
        items:
          $ref: '#/definitions/WlHit'
  WlHit:
    required:
      - Id
      - WatchlistId
      - WatchlistMemberId
      - StreamId
      - Score
      - CreatedAt
      - TrackletId
      - WatchlistFullName
      - WatchlistDisplayName
      - FaceId
    type: object
    properties:
      Id:
        format: int64
        type: integer
      WatchlistId:
        format: int64
        type: integer
      WatchlistMemberId:
        format: int64
        type: integer
      WatchlistMemberExternalId:
        type: string
      StreamId:
        format: int64
        type: integer
      Score:
        format: int32
        type: integer
      CreatedAt:
        format: date-time
        type: string
      UpdatedAt:
        format: date-time
        type: string
      TrackletId:
        format: int64
        type: integer
      WatchlistMemberFullName:
        type: string
      WatchlistMemberDisplayName:
        type: string
      WatchlistFullName:
        type: string
      WatchlistDisplayName:
        type: string
      WatchlistExternalId:
        type: string
      FaceId:
        format: int64
        type: integer
parameters: {}
responses: {}
securityDefinitions: {}
security: []
tags: []